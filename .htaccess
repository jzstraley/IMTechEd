<IfModule>
  # Add CSP (Content Security Policy)
  Header set Protected-by "You"

  # Replace XXXXXXXXXXXXXX by your site name like www.yoursite.com
  Header always set Feature-Policy "camera 'none'; fullscreen 'self'; microphone 'none'; payment 'none'; sync-xhr 'self' docsref.com"

  # Blocks a request if the requested type is
  #    "style" and the MIME type is not "text/css", or
  #    "script" and the MIME type is not a JavaScript MIME type.
  Header set X-Content-Type-Options "nosniff"

  # Prevent from Clickjacking by allowing frame to be displayed only
  # on the same origin as the page itself.
  Header always set X-Frame-Options SAMEORIGIN

  # Force HTTPS (don't use this if you're still on http)
  # env=HTTPS didn't work... but while "expr=%{HTTPS} == 'on'" is well working
  # see https://stackoverflow.com/questions/24144552/how-to-set-hsts-header-from-htaccess-only-on-https#comment81632711_24145033
  Header always set Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" "expr=%{HTTPS} == 'on'"

  # Enables XSS filtering. Rather than sanitizing the page, the browser
  # will prevent rendering of the page if an attack is detected.
  Header always set X-XSS-Protection "1; mode=block"

  # The Referrer header will be omitted entirely. No referrer information is
  # sent along with requests.
  Header always set Referrer-Policy "no-referrer"

  # CSP : define / whitelist domains where files can be loaded
  # (f.i. fonts.googleapis.com, ...)
  # This should be done for scripts, images, styles, frame, ...
  # Replace XXXXXXXXXXXXXX by your site name like https://www.yoursite.com
  # ----------------------------------------------------------------------
  # UNCOMMENT THE FOLLOWING LINE ONLY IF YOU KNOW WHAT YOU'RE DOING.
  # THIS LINE CAN BREAK YOUR SITE SO, ENABLE IT AND TEST YOUR SITE A LOT,
  # ALL PAGES IF POSSIBLE.
  # ----------------------------------------------------------------------
  Header set Content-Security-Policy: "default-src 'self'; base-uri 'self'; form-action 'none'; script-src 'self' 'unsafe-eval' 'unsafe-inline' https://ajax.googleapis.com https://www.google.com https://www.google-analytics.com https://code.jquery.com https://www.gstatic.com https://maxcdn.bootstrapcdn.com https://cdnjs.cloudflare.com https://stackpath.bootstrapcdn.com https://unpkg.com; font-src 'self' data: https://fonts.googleapis.com https://fonts.gstatic.com https://maxcdn.bootstrapcdn.com; style-src 'self' 'unsafe-inline' https://maxcdn.bootstrapcdn.com https://fonts.googleapis.com https://cdnjs.cloudflare.com https://stackpath.bootstrapcdn.com; img-src 'self' data: https://www.paypal.com https://raw.githubusercontent.com; frame-src https://www.docsref.com https://www.google.com https://www.youtube.com; frame-ancestors 'none'"
</IfModule>

User-agent: *
Disallow: /

<FilesMatch "\.(pl|php|cgi|spl)$">
    <IfModule mod_headers.c>
        # security
        Header set X-Frame-Options "DENY"
        Header set X-XSS-Protection "1; mode=block"
    </IfModule>
</FilesMatch>

# secure directory by disabling script execution
AddHandler cgi-script .php .pl .py .jsp .asp .sh .cgi
Options -ExecCGI

##Deny access to all CGI, Perl, PHP and Python
<FilesMatch "\.(asp?x|cgi|php|pl|py)$">
    Deny from all
</FilesMatch>

<IfModule mod_headers.c>
    Header always set X-Content-Type-Options "nosniff"
</IfModule>

<IfModule mod_rewrite.c>

 # Rewrite the URL to force https and www.
 RewriteEngine On
 # HTTP to HTTPS redirect
 # Compliant with hstspreload.org : first redirect to https if needed
 RewriteCond %{HTTPS} !=on
 RewriteRule ^ https://%{HTTP_HOST}%{REQUEST_URI} [L,R=301]

 #   then redirect to www. when the prefix wasn't mentionned
 # hstspreload.org seems to not really like to make the two at once
 RewriteCond %{HTTP_HOST} !^www\.
 RewriteRule ^ https://www.%{HTTP_HOST}%{REQUEST_URI} [L,R=301]
</IfModule>
